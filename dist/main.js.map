{"version":3,"sources":["webpack:///./models/serverMessage.ts","webpack:///./models/peerMessage.ts","webpack:///./index.tsx","webpack:///./app.tsx","webpack:///./services/coordinationService.ts","webpack:///./helpers/uuid.ts","webpack:///./services/peerService.ts","webpack:///./models/peerConnection.ts","webpack:///./components/chatwindow.tsx","webpack:///./components/chatfeed.tsx"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class ServerMessage{\n    public source: string;\n    public destination: string;\n    public type: ServerMessageType;\n    public body: any;\n}\n\nexport enum ServerMessageType{\n    HI = 0,\n    SDP = 1,\n    ICE = 2\n}\n\n\n// WEBPACK FOOTER //\n// ./models/serverMessage.ts","export class PeerMessage{\n    public source: string;\n    public body: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./models/peerMessage.ts","import { App } from \"./app\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\n// Wrap the app in a compatibility check.\nclass SupportCheck extends React.PureComponent{\n    render() {\n        if (typeof RTCPeerConnection != 'undefined') {\n            return <App/>\n        }\n\n        const supportWarningStyle: any = {\n            padding: 10,\n            fontSize: 25\n        };\n\n        return <div style={supportWarningStyle}>Browser doesn't support WebRTC :(</div>\n    }\n}\n\nReactDOM.render(\n    <SupportCheck/>,\n    document.getElementById(\"app\")\n);\n\n\n// WEBPACK FOOTER //\n// ./index.tsx","import { CoordinationService } from \"./services/coordinationService\";\nimport { PeerService } from \"./services/peerService\";\nimport { ServerMessage } from \"./models/serverMessage\";\nimport { PeerMessage } from \"./models/peerMessage\";\n\nimport {ChatWindow} from \"./components/chatwindow\";\nimport {ChatFeed} from \"./components/chatfeed\";\n\nimport * as React from \"react\";\n\ninterface IAppState {messages: PeerMessage[]}\n\nexport class App extends React.Component<undefined, IAppState> {\n    private coordinationService: CoordinationService;\n    private peerService: PeerService;\n\n    constructor(props: any) {\n        super(props);\n\n        this.coordinationService = new CoordinationService();\n        this.coordinationService.eventOnMessage = this.gotMessageFromServer.bind(this);\n    \n        this.peerService = new PeerService();\n        this.peerService.eventOnPeerDescription = this.handleDescription.bind(this);\n        this.peerService.eventOnPeerIceCandidate = this.handleIceCandidate.bind(this);\n        this.peerService.eventOnPeerMessage = this.handleMessageFromPeer.bind(this);\n\n        this.state = {\n            messages: []\n        };\n    }\n\n    private gotMessageFromServer(message: ServerMessage) {\n        this.peerService.getById(message.source)\n            .processServerMessage(message);\n    }\n    \n    private handleIceCandidate(details: RTCIceCandidate, uuid: string) {\n        this.coordinationService.sendIceMessage(details, uuid);\n    }\n    \n    private handleDescription(details: RTCSessionDescription, uuid: string) {\n        this.coordinationService.sendSdpMessage(details, uuid);\n    }\n\n    private handleMessageFromPeer(message: PeerMessage) {\n        this.setState({\n            messages: [].concat(this.state.messages, message)\n        });\n    }\n\n    private handleChatWindowMessageToSend(message: string) {\n        let ownMessage = new PeerMessage;\n         ownMessage.body = message;\n         ownMessage.source = this.coordinationService.localUuid;\n\n         this.setState({\n            messages: [].concat(this.state.messages, ownMessage)\n        });\n\n        this.peerService.messageAll(message);\n    } \n\n    render() {\n        return <div>\n            <div className=\"topBar\"><h1>Peer To Peer Chat</h1></div>\n            <ChatFeed messages={this.state.messages}/>\n            <ChatWindow onMessageSend={this.handleChatWindowMessageToSend.bind(this)}/>\n        </div>;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./app.tsx","import {ServerMessage, ServerMessageType} from \"../models/serverMessage\";\nimport { Uuid } from \"../helpers/uuid\";\n\nexport class CoordinationService {\n    public localUuid: string;\n    private connection : WebSocket;\n    private queuedMessages: object[];\n\n    public eventOnMessage: (message: ServerMessage) => void;\n\n    constructor() {\n        this.queuedMessages = [];\n        this.localUuid = Uuid();\n\n        var HOST = location.origin.replace(/^http/, 'ws')\n        this.connection = new WebSocket(HOST);\n    \n        this.connection.onmessage = (msg) => { this.handleOnMessage(msg) };\n        this.connection.onopen = () => this.handleOnOpen();\n    }\n\n    sendSdpMessage(body: any, destination: string) {\n        let sdpMessage = new ServerMessage()\n        sdpMessage.source = this.localUuid;\n        sdpMessage.destination = destination;\n        sdpMessage.body = body;\n        sdpMessage.type = ServerMessageType.SDP;\n\n        this.sendMessage(sdpMessage);\n    }\n    sendIceMessage(body: any, destination: string) {\n        let iceMessage = new ServerMessage()\n        iceMessage.source = this.localUuid;\n        iceMessage.destination = destination;\n        iceMessage.body = body;\n        iceMessage.type = ServerMessageType.ICE;\n\n        this.sendMessage(iceMessage);\n    }\n    private sendMessage(message: ServerMessage) {\n        if (this.connection.readyState != WebSocket.OPEN) {\n            console.error(\"Unable to send because WebSocket isn't open\");\n            return;\n        }\n\n        this.connection.send(JSON.stringify(message));\n    }\n    private handleOnOpen() {\n        let helloMessage = new ServerMessage()\n        helloMessage.source = this.localUuid;\n        helloMessage.type = ServerMessageType.HI\n\n        this.sendMessage(helloMessage);\n    }\n    private handleOnMessage(message: MessageEvent) {\n        var signal : ServerMessage = JSON.parse(message.data);\n\n        this.eventOnMessage(signal);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./services/coordinationService.ts","// Taken from http://stackoverflow.com/a/105074/515584\n// Strictly speaking, it's not a real UUID, but it gets the job done here\nexport function Uuid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\n\n// WEBPACK FOOTER //\n// ./helpers/uuid.ts","import { PeerConnection } from \"../models/peerConnection\";\nimport { PeerMessage } from \"../models/peerMessage\";\n\nexport class PeerService {\n    private activePeers: {[id: string] : PeerConnection; };\n\n    public eventOnPeerIceCandidate: (details: RTCIceCandidate, uuid: string) => void;\n    public eventOnPeerDescription: (details: RTCSessionDescription, uuid: string) => void;\n    public eventOnPeerMessage: (message: PeerMessage) => void;\n\n    constructor() {\n        this.activePeers = {};\n    }\n\n    public getById(id: string) {\n        if (!this.activePeers[id]) {\n            let pc: PeerConnection = new PeerConnection(id);\n            \n            pc.eventIceCandidate = (candidate) =>{ this.eventOnPeerIceCandidate(candidate, id); }\n            pc.eventDescription = (description) => this.eventOnPeerDescription(description, id);\n            pc.eventOnMessage = (message) => this.eventOnPeerMessage(message);\n            pc.eventOnClose = () => this.handleOnClose(id);\n            \n            this.activePeers[id] = pc;\n        }\n    \n        return this.activePeers[id];\n    }\n\n    public getCount() {\n        return Object.keys(this.activePeers).length;\n    }\n\n    public messageAll(message: string) {\n        for(var i in this.activePeers) {\n            this.activePeers[i].messagePeer(message);\n        }\n    }\n\n    private handleOnClose(id: string) {\n        delete this.activePeers[id];\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./services/peerService.ts","import { ServerMessage, ServerMessageType } from \"./serverMessage\";\nimport { PeerMessage } from \"./peerMessage\";\n\nconst peerConnectionConfig = {\n    'iceServers': [\n        { 'urls': 'stun:stun.services.mozilla.com' },\n        { 'urls': 'stun:stun.l.google.com:19302' },\n    ]\n};\n\nexport class PeerConnection {\n    public rtcConnection: RTCPeerConnection;\n    public rtcReceiveChannel: RTCDataChannel;\n    public rtcSendChannel: RTCDataChannel;\n\n    public eventIceCandidate: (candidate: RTCIceCandidate) => void;\n    public eventDescription: (description: RTCSessionDescription) => void;\n    public eventOnMessage: (message : PeerMessage) => void;\n    public eventOnClose: () => void;\n    public uuid: string;\n\n    constructor(uuid: string) {\n        this.uuid = uuid;\n        this.rtcConnection = new RTCPeerConnection(peerConnectionConfig);\n        this.rtcConnection.ondatachannel = (event) => { this.handleOnDataChannel(event) }\n        this.rtcConnection.onicecandidate = (event) => { this.handleOnIceCandidate(event) }\n        this.rtcConnection.oniceconnectionstatechange = (event) => { this.handleOnIceConnectionStateChange(event) }\n\n        this.rtcSendChannel = this.rtcConnection.createDataChannel('sendDataChannel', null);\n    }\n\n    public processServerMessage(signal: ServerMessage) {\n        switch (signal.type) {\n            case ServerMessageType.HI:\n                this.createOffer();\n            break;\n            case ServerMessageType.ICE:\n                this.addIceCandidate(signal.body)\n            break;\n            case ServerMessageType.SDP:\n                this.setRemoteDescription(signal.body);\n            break;\n        }\n    }\n\n    private createOffer() {\n        let peer = this;\n\n        this.rtcConnection\n            .createOffer()\n            .then(function (description) {\n                peer.setLocalDescription(description);\n            })\n            .catch(this.handleError);\n    }\n\n    private setRemoteDescription(details: any) {\n        let peer = this;\n\n        this.rtcConnection\n        .setRemoteDescription(new RTCSessionDescription(details))\n        .then(function () {\n            // Only create answers in response to offers\n            if (details.type == 'offer') {\n                peer.rtcConnection\n                    .createAnswer()\n                    .then(function (description) {\n                        peer.setLocalDescription(description);\n                    })\n                    .catch(peer.handleError);\n            }\n        }).catch(this.handleError);\n    }\n\n    private setLocalDescription(details: RTCSessionDescriptionInit) {\n        let peer = this;\n\n        this.rtcConnection\n            .setLocalDescription(details)\n            .then(function () {\n                peer.eventDescription(peer.rtcConnection.localDescription);\n            })\n            .catch(this.handleError);\n    }\n\n    private addIceCandidate(details: RTCIceCandidate) {\n        this.rtcConnection\n            .addIceCandidate(new RTCIceCandidate(details))\n            .catch(this.handleError);\n    }\n\n    private handleOnIceCandidate(event: RTCPeerConnectionIceEvent) {\n        if (event.candidate != null) {\n            this.eventIceCandidate(event.candidate);\n        }\n    }\n\n    private handleOnIceConnectionStateChange(event: Event) {\n        if (this.rtcConnection.iceConnectionState === 'disconnected') {\n            this.eventOnClose();\n        }\n    }\n\n    private handleOnDataChannel(event: RTCDataChannelEvent) {\n        this.rtcReceiveChannel = event.channel;\n\n        this.rtcReceiveChannel.onmessage = (event) => { this.handleReceiveChannelOnMessage(event) };\n        this.rtcReceiveChannel.onopen = () => { this.handleReceiveChannelOnOpen() };\n        this.rtcReceiveChannel.onclose = () => { this.handleReceiveChannelOnClose() };\n    }\n\n    private handleReceiveChannelOnMessage(event: MessageEvent) {\n        let newMessage = new PeerMessage();\n\n        newMessage.source = this.uuid;\n        newMessage.body = event.data;\n\n        this.eventOnMessage(newMessage);\n    }\n\n    private handleReceiveChannelOnOpen() {\n        var readyState = this.rtcReceiveChannel.readyState;\n    }\n\n    private handleReceiveChannelOnClose() {\n        var readyState = this.rtcSendChannel.readyState;\n    }\n\n    private handleError() {\n\n    }\n\n    public messagePeer(message: string) {\n        if(this.rtcSendChannel.readyState == 'open') {\n            this.rtcSendChannel.send(message);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./models/peerConnection.ts","import * as React from \"react\";\n\nconst windowStyle : object = {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: \"85%\",\n    borderTop: \"1px solid #AAA\",\n    padding: 10\n}\n\nconst textBoxStyle : object = {\n    resize: \"none\",\n    borderRadius: 4,\n    border: \"none\",\n    outline: \"1px solid #AAA\",\n    width: \"95%\",\n    height: \"100%\",\n    fontSize: \"1em\"\n}\n\nconst textBoxContainerStyle : object = {\n    display: \"inline-block\",\n    width: \"80%\",\n    height: \"100%\"\n}\n\nconst buttonContainerStyle : object = {\n    display: \"inline-block\",\n    width: \"20%\",\n    height: \"100%\",\n    verticalAlign: \"top\"\n}\n\nconst buttonStyle : object = {\n    verticalAlign: \"top\",\n    backgroundColor: \"#425BBD\",\n    color: \"#FFF\",\n    border: \"none\",\n    borderRadius: 4,\n    width: \"100%\",\n    height: \"100%\",\n    fontSize: \"1em\"\n\n}\n\ninterface IChatWindowState {message: string};\ninterface IChatWindowProps {onMessageSend: (message: string) => void};\n\nexport class ChatWindow extends React.Component<IChatWindowProps, IChatWindowState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            message: \"\"\n        };\n    }\n\n    render() {\n        return <div style={windowStyle}>\n            <div style={textBoxContainerStyle}>\n                <textarea style={textBoxStyle} \n                    value={this.state.message} \n                    onKeyDown={this.handleMessageOnKeydown.bind(this)}\n                    onChange={this.handleMessageOnChange.bind(this)}></textarea>\n            </div>\n            <div style={buttonContainerStyle}>\n                <button style={buttonStyle} onClick={this.handleOnSend.bind(this)}>Send</button>\n            </div>\n        </div>\n    }\n\n    private handleOnSend() {\n        this.props.onMessageSend(this.state.message);\n\n        this.setState({message: \"\"});\n    }\n\n    private handleMessageOnChange(event: any) {\n        this.setState({message: event.target.value})\n    }\n\n    private handleMessageOnKeydown(event: any) {\n        // If Enter was pressed, treat this as a send.\n        if (event.keyCode == 13) {\n            event.preventDefault();\n            this.handleOnSend();\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/chatwindow.tsx","import * as React from \"react\";\n\nimport {PeerMessage} from \"../models/peerMessage\";\n\nconst chatFeedStyle : object = {\n    position: \"absolute\",\n    top: \"10%\",\n    left: 0,\n    right: 0,\n    bottom: \"15%\",\n    borderTop: \"1px solid #AAA\",\n    padding: \"30px\"\n}\n\ninterface IChatFeedProps { messages: PeerMessage[] }\n\nexport class ChatFeed extends React.Component<IChatFeedProps, undefined> {\n    render() {\n        return <div style={chatFeedStyle}>\n            {this.props.messages.map(function(message: PeerMessage, index: number) {\n                return <span key={index}>[{message.source}] - {message.body}<br /></span>\n            })}\n        </div>\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/chatfeed.tsx"],"sourceRoot":""}