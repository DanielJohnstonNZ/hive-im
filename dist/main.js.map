{"version":3,"sources":["webpack:///./models/serverMessage.ts","webpack:///./index.tsx","webpack:///./app.tsx","webpack:///./services/coordinationService.ts","webpack:///./helpers/uuid.ts","webpack:///./services/peerService.ts","webpack:///./models/peerConnection.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class ServerMessage{\n    public source: string;\n    public destination: string;\n    public type: ServerMessageType;\n    public body: any;\n}\n\nexport enum ServerMessageType{\n    HI = 0,\n    SDP = 1,\n    ICE = 2\n}\n\n\n// WEBPACK FOOTER //\n// ./models/serverMessage.ts","import { App } from \"./app\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <App/>,\n    document.getElementById(\"app\")\n);\n\n\n// WEBPACK FOOTER //\n// ./index.tsx","import { CoordinationService } from \"./services/coordinationService\";\nimport { PeerService } from \"./services/peerService\";\nimport { ServerMessage } from \"./models/serverMessage\";\n\nimport * as React from \"react\";\n\n\nexport class App extends React.Component<undefined, undefined> {\n    private coordinationService: CoordinationService;\n    private peerService: PeerService;\n\n    constructor(props: any) {\n        super(props);\n\n        this.coordinationService = new CoordinationService();\n        this.coordinationService.eventOnMessage = this.gotMessageFromServer.bind(this);\n    \n        this.peerService = new PeerService();\n        this.peerService.eventOnPeerDescription = this.handleDescription.bind(this);\n        this.peerService.eventOnPeerIceCandidate = this.handleIceCandidate.bind(this);\n        this.peerService.eventOnPeersChanged = () =>  {};\n\n        \n        setTimeout(this.polling.bind(this), 1000);\n    }\n\n    private polling() {\n        this.peerService.messageAll(\"Ping\");\n\n        setTimeout(this.polling.bind(this), 1000);\n    }\n\n    private gotMessageFromServer(message: ServerMessage) {\n        this.peerService.getById(message.source)\n            .processServerMessage(message);\n    }\n    \n    private handleIceCandidate(details: RTCIceCandidate, uuid: string) {\n        this.coordinationService.sendIceMessage(details, uuid);\n    }\n    \n    private handleDescription(details: RTCSessionDescription, uuid: string) {\n        this.coordinationService.sendSdpMessage(details, uuid);\n    }\n\n    private handlePeersChange() {\n        console.log(this);\n    }\n\n    render() {\n        return <h1>Welcome</h1>;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./app.tsx","import {ServerMessage, ServerMessageType} from \"../models/serverMessage\";\nimport { Uuid } from \"../helpers/uuid\";\n\nexport class CoordinationService {\n    private localUuid: string;\n    private connection : WebSocket;\n    private queuedMessages: object[];\n\n    public eventOnMessage: (message: ServerMessage) => void;\n\n    constructor() {\n        this.queuedMessages = [];\n        this.localUuid = Uuid();\n\n        var HOST = location.origin.replace(/^http/, 'ws')\n        this.connection = new WebSocket(HOST);\n    \n        this.connection.onmessage = (msg) => { this.handleOnMessage(msg) };\n        this.connection.onopen = () => this.handleOnOpen();\n    }\n\n    sendSdpMessage(body: any, destination: string) {\n        let sdpMessage = new ServerMessage()\n        sdpMessage.source = this.localUuid;\n        sdpMessage.destination = destination;\n        sdpMessage.body = body;\n        sdpMessage.type = ServerMessageType.SDP;\n\n        this.sendMessage(sdpMessage);\n    }\n    sendIceMessage(body: any, destination: string) {\n        let iceMessage = new ServerMessage()\n        iceMessage.source = this.localUuid;\n        iceMessage.destination = destination;\n        iceMessage.body = body;\n        iceMessage.type = ServerMessageType.ICE;\n\n        this.sendMessage(iceMessage);\n    }\n    private sendMessage(message: ServerMessage) {\n        if (this.connection.readyState != WebSocket.OPEN) {\n            console.error(\"Unable to send because WebSocket isn't open\");\n            return;\n        }\n\n        this.connection.send(JSON.stringify(message));\n    }\n    private handleOnOpen() {\n        let helloMessage = new ServerMessage()\n        helloMessage.source = this.localUuid;\n        helloMessage.type = ServerMessageType.HI\n\n        this.sendMessage(helloMessage);\n    }\n    private handleOnMessage(message: MessageEvent) {\n        var signal : ServerMessage = JSON.parse(message.data);\n\n        this.eventOnMessage(signal);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./services/coordinationService.ts","// Taken from http://stackoverflow.com/a/105074/515584\n// Strictly speaking, it's not a real UUID, but it gets the job done here\nexport function Uuid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\n\n// WEBPACK FOOTER //\n// ./helpers/uuid.ts","import { PeerConnection } from \"../models/peerConnection\";\n\n\nexport class PeerService {\n    private activePeers: {[id: string] : PeerConnection; };\n\n    public eventOnPeerIceCandidate: (details: RTCIceCandidate, uuid: string) => void;\n    public eventOnPeerDescription: (details: RTCSessionDescription, uuid: string) => void;\n    public eventOnPeersChanged: () => void;\n\n    constructor() {\n        this.activePeers = {};\n    }\n\n    public getById(id: string) {\n        if (!this.activePeers[id]) {\n            let pc: PeerConnection = new PeerConnection(id);\n            \n            pc.eventIceCandidate = (candidate) =>{ this.eventOnPeerIceCandidate(candidate, id); }\n            pc.eventDescription = (description) => this.eventOnPeerDescription(description, id);\n            pc.eventOnMessage = (message) => {console.log(id + \" says \" + message.data)};\n            pc.eventOnClose = () => this.handleOnClose(id);\n            \n            this.activePeers[id] = pc;\n\n            this.eventOnPeersChanged();\n        }\n    \n        return this.activePeers[id];\n    }\n\n    public getCount() {\n        return Object.keys(this.activePeers).length;\n    }\n\n    public messageAll(message: any) {\n        for(var i in this.activePeers) {\n            this.activePeers[i].messagePeer(message);\n        }\n    }\n\n    private handleOnClose(id: string) {\n        delete this.activePeers[id];\n\n        this.eventOnPeersChanged();\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./services/peerService.ts","import { ServerMessage, ServerMessageType } from \"./serverMessage\";\n\nconst peerConnectionConfig = {\n    'iceServers': [\n        { 'urls': 'stun:stun.services.mozilla.com' },\n        { 'urls': 'stun:stun.l.google.com:19302' },\n    ]\n};\n\nexport class PeerConnection {\n    public rtcConnection: RTCPeerConnection;\n    public rtcReceiveChannel: RTCDataChannel;\n    public rtcSendChannel: RTCDataChannel;\n\n    public eventIceCandidate: (candidate: RTCIceCandidate) => void;\n    public eventDescription: (description: RTCSessionDescription) => void;\n    public eventOnMessage: (message : any) => void;\n    public eventOnClose: () => void;\n    public uuid: string;\n\n    constructor(uuid: string) {\n        this.uuid = uuid;\n        this.rtcConnection = new RTCPeerConnection(peerConnectionConfig);\n        this.rtcConnection.ondatachannel = (event) => { this.handleOnDataChannel(event) }\n        this.rtcConnection.onicecandidate = (event) => { this.handleOnIceCandidate(event) }\n        this.rtcConnection.oniceconnectionstatechange = (event) => { this.handleOnIceConnectionStateChange(event) }\n\n        this.rtcSendChannel = this.rtcConnection.createDataChannel('sendDataChannel', null);\n    }\n\n    public processServerMessage(signal: ServerMessage) {\n        switch (signal.type) {\n            case ServerMessageType.HI:\n                this.createOffer();\n            break;\n            case ServerMessageType.ICE:\n                this.addIceCandidate(signal.body)\n            break;\n            case ServerMessageType.SDP:\n                this.setRemoteDescription(signal.body);\n            break;\n        }\n    }\n\n    private createOffer() {\n        let peer = this;\n\n        this.rtcConnection\n            .createOffer()\n            .then(function (description) {\n                peer.setLocalDescription(description);\n            })\n            .catch(this.handleError);\n    }\n\n    private setRemoteDescription(details: any) {\n        let peer = this;\n\n        this.rtcConnection\n        .setRemoteDescription(new RTCSessionDescription(details))\n        .then(function () {\n            // Only create answers in response to offers\n            if (details.type == 'offer') {\n                peer.rtcConnection\n                    .createAnswer()\n                    .then(function (description) {\n                        peer.setLocalDescription(description);\n                    })\n                    .catch(peer.handleError);\n            }\n        }).catch(this.handleError);\n    }\n\n    private setLocalDescription(details: RTCSessionDescriptionInit) {\n        let peer = this;\n\n        this.rtcConnection\n            .setLocalDescription(details)\n            .then(function () {\n                peer.eventDescription(peer.rtcConnection.localDescription);\n            })\n            .catch(this.handleError);\n    }\n\n    private addIceCandidate(details: RTCIceCandidate) {\n        this.rtcConnection\n            .addIceCandidate(new RTCIceCandidate(details))\n            .catch(this.handleError);\n    }\n\n    private handleOnIceCandidate(event: RTCPeerConnectionIceEvent) {\n        if (event.candidate != null) {\n            this.eventIceCandidate(event.candidate);\n        }\n    }\n\n    private handleOnIceConnectionStateChange(event: Event) {\n        if (this.rtcConnection.iceConnectionState === 'disconnected') {\n            this.eventOnClose();\n        }\n    }\n\n    private handleOnDataChannel(event: RTCDataChannelEvent) {\n        this.rtcReceiveChannel = event.channel;\n\n        this.rtcReceiveChannel.onmessage = (event) => { this.handleReceiveChannelOnMessage(event) };\n        this.rtcReceiveChannel.onopen = () => { this.handleReceiveChannelOnOpen() };\n        this.rtcReceiveChannel.onclose = () => { this.handleReceiveChannelOnClose() };\n    }\n\n    private handleReceiveChannelOnMessage(event: MessageEvent) {\n        this.eventOnMessage(event);\n    }\n\n    private handleReceiveChannelOnOpen() {\n        var readyState = this.rtcReceiveChannel.readyState;\n    }\n\n    private handleReceiveChannelOnClose() {\n        var readyState = this.rtcSendChannel.readyState;\n    }\n\n    private handleError() {\n\n    }\n\n    public messagePeer(message: string) {\n        if(this.rtcSendChannel.readyState == 'open') {\n            this.rtcSendChannel.send(message);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./models/peerConnection.ts"],"sourceRoot":""}